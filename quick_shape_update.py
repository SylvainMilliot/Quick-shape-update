# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QuickShapeUpdate
                                 A QGIS plugin
 This plugin updates the shapes length and/or area in the selected layer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-11-01
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Sylvain Milliot
        email                : milliot.sylvain@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import QgsVectorLayer, QgsFeature, edit
from qgis.gui import QgsMessageBar

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .quick_shape_update_dialog import QuickShapeUpdateDialog
import os.path


class QuickShapeUpdate:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QuickShapeUpdate_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Quick Shape Update')

        # Check if plugin was started the first time in the current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of the message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QuickShapeUpdate', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when the mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = 'C:/Users/sylvain.milliot/AppData/Roaming/QGIS/QGIS3/profiles/default/python/plugins/quick_shape_update/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Quick Shape Update'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # Will be set to False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Quick Shape Update'),
                action)
            self.iface.removeToolBarIcon(action)

    def update_attributes_with_length_and_area(self, layer):
        if isinstance(layer, QgsVectorLayer):
            if "Shape_Length" in [field.name() for field in layer.fields()]:
                # Calculate and update length for each feature
                with edit(layer):
                    for feature in layer.getFeatures():
                        length = feature.geometry().length()
                        layer.changeAttributeValue(feature.id(), layer.fields().indexFromName("Shape_Length"), length)

            if "Shape_Area" in [field.name() for field in layer.fields()]:
                # Calculate and update area for each feature
                with edit(layer):
                    for feature in layer.getFeatures():
                        area = feature.geometry().area()
                        layer.changeAttributeValue(feature.id(), layer.fields().indexFromName("Shape_Area"), area)

    def run(self):
        # Get the selected layer
        layer = self.iface.activeLayer()
        if layer:
            # Check and update attributes
            self.update_attributes_with_length_and_area(layer)
            # Show a message indicating the update is complete
            self.show_message("Attributes updated successfully.", level=QMessageBox.Information)
        else:
            QMessageBox.critical(None, "Error", "No active layer selected!")

    def show_message(self, message, level=QMessageBox.Information, duration=3):
        """Show a message using QMessageBox."""
        msg = QMessageBox()
        msg.setIcon(level)
        msg.setText(message)
        msg.setWindowTitle("Quick Shape Update")
        msg.exec_()

